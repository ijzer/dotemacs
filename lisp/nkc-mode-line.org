#+TITLE: Mode Line

Sets up a dynamic mode line that takes into account the width of the
window to shorten and truncate things to display as much as possible
while remaining readable. 

* Setup
** cl
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (use-package cl-lib))
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC
** spaceline
   [[https://github.com/TheBB/spaceline][github]]
#+BEGIN_SRC emacs-lisp
  (use-package spaceline-segments
    :config
    (when window-system
      (setq spaceline-window-numbers-unicode t)))
#+END_SRC
* Use Spaceline
   Spaceline takes two arguments, things to display on the left-hand
   and right-hand sides of the mode line.
#+BEGIN_SRC emacs-lisp
  (spaceline-install
   <<spaceline-left>>
   <<spaceline-right>>)
#+END_SRC
* Colors
* Segments
** Left
   This blocks out the spaceline segments the left side of the
   mode line will use. Segment definitions can be found by searching
   for spaceline--segment-{name}. 
#+NAME: spaceline-left
#+BEGIN_SRC emacs-lisp :tangle no
  `((nkc/ace-window
     :face highlight-face
     ,@(when window-system '(:tight)))
    line-column
    buffer-position
    remote-host
    (nkc/buffer-status nkc/vc-branch)
    (nkc/buffer-id :fallback buffer-id))
#+END_SRC
** Right 
   This blocks out the spaceline segments the right side of the
   mode line will use. Segment definitions can be found by searching
   for spaceline--segment-{name}.
#+NAME: spaceline-right
#+BEGIN_SRC emacs-lisp :tangle no
  '((org-clock :when active)
    global
    major-mode
    (nkc/minor-modes :when active))
#+END_SRC
** Info+
#+BEGIN_SRC emacs-lisp
  (defvar nkc/info-breadcrumb-max-width 75
    "Max width for breadcrumbs in info+ mode line")

  (defun nkc/parse-info-mode-line ()
    (string-match "\\`(\\(?1:[^)]+\\))\\(?2:.+\\)\\(?: > \\(?3:.+\\)\\)?\\'"
                  mode-line-format)
    (let* ((filename (match-string 1 mode-line-format))
           (breadcrumbs (match-string 2 mode-line-format))
           (node (s-truncate nkc/info-breadcrumb-max-width
                             (match-string 3 mode-line-format)))
           (len (- nkc/info-breadcrumb-max-width (length node)))
           (breadcrumbs (if (< len (length breadcrumbs))
                            (concat "..." (s-right (- len 3) breadcrumbs))
                          breadcrumbs))
           (breadcrumbs (when breadcrumbs (s-split " > " breadcrumbs))))
      (setq mode-line-format `("%e"
                               (:eval (spaceline--prepare
                                       '((nkc/ace-window
                                          :face highlight-face
                                          ,@(when window-system '(:tight)))
                                         (,filename
                                          :face highlight-face)
                                         ,@breadcrumbs
                                         ,node)
                                       nil))))))

  (advice-add 'Info-set-mode-line :after #'nkc/parse-info-mode-line)
#+END_SRC
** Segment Definitions
   We need to add some segments and to rewrite default segments to
   make things work for me
*** ace window
    Gives the value of the window for selecting with ace-window
#+BEGIN_SRC emacs-lisp
  (spaceline-define-segment nkc/ace-window
    "The current window number for jumping to with ace-window.
  Requires ace-window to be installed and ace-window-display mode to be
  set to true."
    (let* ((win (window-parameter (selected-window) 'ace-window-path)))
      (if spaceline-window-numbers-unicode
	  (spaceline--unicode-number win)
	win))
    :when (bound-and-true-p ace-window-display-mode))
#+END_SRC
*** Modified buffers
#+BEGIN_SRC emacs-lisp
  (defvar nkc/buffer-status-alist
    '((read-only . "R")
      (not-modified . "")
      (modified . "~")
      (modified-outside . "~")))

  (spaceline-define-segment nkc/buffer-status
    "Displays a character depending on the status of the buffer."
    (cdr (assoc
          (cond
           ((buffer-stale--default-function) 'modified-outside)
           (buffer-read-only 'read-only)
           ((buffer-modified-p) 'modified)
           (t 'not-modified))
          nkc/buffer-status-alist)))
#+END_SRC
*** Version control
    vc-mode gives us useful info but takes up a ton of space.
**** vc status
#+BEGIN_SRC emacs-lisp
  (defvar nkc/vc-state-char-alist
    '((up-to-date . "")
      (edited . "~")
      (needs-update . "∆")
      (needs-merge . "∇")
      (added . "+")
      (removed . "×")
      (conflict . "!")
      (missing . "?")
      (unregistered . "??")))

  (spaceline-define-segment nkc/vc-state
    (let* ((backend (vc-backend buffer-file-name))
           (state (vc-state-refresh buffer-file-name backend)))
      (cdr (assoc state nkc/vc-state-char-alist))))
#+END_SRC
**** vc branch
#+BEGIN_SRC emacs-lisp
  (spaceline-define-segment nkc/vc-branch
    "Version control information"
    (let* ((mode vc-mode)
           (backend (vc-backend buffer-file-name)))
      (replace-regexp-in-string
       (format  "\\` \\(%s[-!:?@]\\)" (symbol-name backend)) "" mode))
    :when (and vc-mode buffer-file-name))
#+END_SRC
*** Buffer ID
**** Helper functions and variables
#+BEGIN_SRC emacs-lisp
  (defvar nkc/buffer-file-replacement-alist
    `((,(rx "[*Org Src " (+ not-newline) "[ " (+ not-newline) "]*]") "")
      (,(rx "/home/" (+? not-newline) "/") "~/")
      (,user-emacs-directory "~emacs/")
      (,(rx "~emacs/lisp/") "~elisp/")
      (,(rx "~/" (+ not-newline) "doc" (+ not-newline) "org") "~org"))
    "AList in the form ((regexp . replacement)) for applying to
  buffer-file-name to shorten it. Replacements are applied sequentially.")

  (defvar nkc/buffer-id-max-width 40 "Max width of buffer id displayed in mode line")
  (defvar nkc/buffer-id-shortener "…"
    "String inserted between prefix and directory name if buffer id is
  shortened")

  (defun nkc/replace-buffer-file (buffer-file)
  "Replace matches on buffer-file using nkc/buffer-file-replacement-alist"
    (dolist (prefix nkc/buffer-file-replacement-alist)
      (setq buffer-file (replace-regexp-in-string (car prefix)
						  (cadr prefix)
						  buffer-file)))
    buffer-file)

  (defun nkc/shorten-buffer-file (buffer-file max &optional connector)
    "Shorten buffer-file to max at longest by replacing directory names with
  connector"
    (let* ((filename (file-name-nondirectory buffer-file))
	   (dirname (file-name-directory buffer-file))
	   (prefix (car (s-match "\\`~.*?/" dirname)))
	   (dirname (s-chop-prefix prefix dirname))
	   (len (- max (length filename) (length prefix)))
	   (connector (if connector connector nkc/buffer-id-shortener)))
      (concat prefix
	      (if (< len (length dirname))
		  (concat connector (s-right (- len (length connector)) dirname))
		dirname)
	      filename)))

  (defvar nkc/buffer-file-name nil "File name of current buffer to check for changes")
  (make-variable-buffer-local 'nkc/buffer-file-name)
  (defvar nkc/buffer-id nil "Shortened buffer ID to display in mode line")
  (make-variable-buffer-local 'nkc/buffer-id)

  (defun nkc/update-buffer-id-maybe (buffer-file)
    "Update buffer name for display if buffer-file-name has changed"
    (unless (string= buffer-file nkc/buffer-file-name)
      (setq nkc/buffer-file-name buffer-file)
      (setq nkc/buffer-id (nkc/shorten-buffer-file
			   (nkc/replace-buffer-file buffer-file)
			   nkc/buffer-id-max-width)))
    nkc/buffer-id)
#+END_SRC
**** Segment definition
#+BEGIN_SRC emacs-lisp
  (spaceline-define-segment nkc/buffer-id
    "Current buffer ID"
    (cond
     (buffer-file-name (nkc/update-buffer-id-maybe buffer-file-name))
     ((buffer-name) (buffer-name)))
    :when (or buffer-file-name (buffer-name)))  
#+END_SRC
*** Minor modes
#+BEGIN_SRC emacs-lisp
  (defvar nkc/minor-mode-replacer-alist '((auto-fill-function "↴")
					  (visual-line-mode "↲")
					  (helm-mode "")
					  (lispy-mode "Lispy")
					  (org-src-mode "Src")
					  (eldoc-mode "")
					  (edebug-mode "∑")
					  (visible-mode "V")
					  (overwrite-mode "<")
					  (isearch-mode "")
					  (abbrev-mode "𝛂")
					  (doc-view-minor-mode "Doc")
					  (image-minor-mode (:eval
							     (if image-type
								 image-type
							       "Img"))))
    "Alist of (MODE . LIGHTER) to replace those given in minor-mode-alist")

  (defun nkc/minor-mode-replacer (mode lighter)
    (let ((replacer (cadr (assoc mode nkc/minor-mode-replacer-alist))))
      (if replacer
	  replacer
	lighter)))

  (spaceline-define-segment nkc/minor-modes
    "A list of minor modes. Configure the separator with 'spaceline-minor-modes-separator and the lighters with nkc/minor-mode-replacer-alist"
    (-filter
     (lambda (k) (s-present? k))
     (mapcar (lambda (mm)
	       (let* ((mode (car mm))
		      (lighter (cadr mm))
		      (displayp (and (boundp mode)
				     (symbol-value mode)))
		      (lighter (when displayp
				 (nkc/minor-mode-replacer
				  mode (s-trim (format-mode-line lighter)))))
		      (displayp (s-present? lighter)))
		 (when displayp
		   lighter)))
	     minor-mode-alist))
    :separator spaceline-minor-modes-separator)
#+END_SRC
* Provide
#+BEGIN_SRC emacs-lisp
  (provide 'nkc-mode-line)
#+END_SRC
