#+TITLE: Package Settings

This file is where everything that comes in a package (whether from
elpa or not) should be loaded and configured. Cask actually handles
all the autoload stuff but it's still nice to make it explicit.

* Setup
** Dependencies
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (require 'bind-key)
#+END_SRC
** Helper functions
   These are just helpers for package loading. If they help other
   stuff they oughta go somewhere else.
*** hook-into-modes
    stolen from [[https://github.com/jwiegley/dot-emacs][jww's dot emacs]]. adds a function to each of a list of
    modes. needs to be used with apply.
#+BEGIN_SRC emacs-lisp
  (defsubst hook-into-modes (func &rest modes)
    (dolist (mode-hook modes) (add-hook mode-hook func)))
#+END_SRC
* Packages
** Magit
   [[https://github.com/magit/magit][github]] [[http://magit.vc/manual/][manual]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-c g s" . magit-status)
           ("C-c g p" . magit-pull)))
#+END_SRC
** TODO Tramp
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company-mode
    :bind ("C-t" . company-complete))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-setup-side-window-right-bottom)
    (which-key-mode))
#+END_SRC
* Helm
** helm-config
#+BEGIN_SRC emacs-lisp
  (use-package helm-config
    :demand t
    :bind (("M-x" . helm-M-x)
	   ("C-h a" . helm-apropos)
	   ("C-x b" . helm-mini)
	   ("C-x C-f" . helm-find-files)
	   ("C-c h" . helm-command-prefix)
	   ("C-c h o" . helm-occur)
	   ("C-c h r" . helm-regexp)
	   ("C-c h x" . helm-resume)
	   ("C-c h y" . helm-show-kill-ring))
    :init (unbind-key "C-x c")
    :config
    (require 'async-bytecomp)
    (bind-keys :map helm-map
	       ("<tab>" . helm-execute-persistent-action)
	       ("C-i" . helm-execute-persisten-action)
	       ("C-z" . helm-select-action))

    (helm-auto-resize-mode 1)

    (when (executable-find "curl") (setq helm-google-suggest-use-curl-p t))

    (use-package hel)m

    (helm-mode 1))
#+END_SRC
** helm-descbinds
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :bind ("C-h b" . helm-descbinds)
    :config (require 'helmconfig))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (use-package nkc-org)
#+END_SRC
* Modes
** Lisp
*** Packages
**** Lispy
     [[https://github.com/abo-abo/lispy][github]]
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :defer t)
#+END_SRC
*** Hooks
**** Lisp editing modes
     Sets up a hook to turn on various good things when using a lisp
     mode. Add additional modes to lisp-modes if needed.
#+BEGIN_SRC emacs-lisp
  (defvar lisp-modes '(emacs-lisp-mode
                       inferior-emacs-lisp-mode
                       ielm-mode
                       lisp-mode
                       inferior-lisp-mode
                       lisp-interaction-mode))
  (defvar lisp-mode-hooks
    (mapcar (lambda (mode)
              (intern
               (concat (symbol-name mode) "-hook")))
            lisp-modes))

  (defvar lisp-mode-initialized nil)

  (defun nkc/lisp-mode-hook ()
    (unless lisp-mode-initialized
      (setq lisp-mode-initialized t)
    
      (info-lookmore-elisp-userlast)
      (info-lookmore-elisp-cl))

    (add-hook 'after-save-hook 'check-parens nil t)
    (eldoc-mode 1)
    (lispy-mode 1)
    (show-paren-mode)

  


    (font-lock-add-keywords
     nil
     `((,(rx "(" symbol-start (group "lambda") symbol-end " (")
        (0 (ignore
            (compose-region (match-beginning 1)
                            (match-end 1) ?Î»)))))))

  (apply #'hook-into-modes 'nkc/lisp-mode-hook lisp-mode-hooks)
#+END_SRC
**** Minibuffer evals
#+BEGIN_SRC emacs-lisp

#+END_SRC
* Themes
** Solarized
   [[https://github.com/sellout/emacs-color-theme-solarized][github]]
#+BEGIN_SRC emacs-lisp
  (load-theme 'solarized t)
#+END_SRC
*** TODO rewrite solarized-color-definitions per old .emacs
* Provide
#+BEGIN_SRC emacs-lisp
  (provide 'nkc-packages)
#+END_SRC
