#+TITLE: Package Settings

This file is where everything that comes in a package (whether from
elpa or not) should be loaded and configured. Cask actually handles
all the autoload stuff but it's still nice to make it explicit.

* Setup
** Dependencies
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (require 'bind-key)
#+END_SRC
** Helper functions
   These are just helpers for package loading. If they help other
   stuff they oughta go somewhere else.
*** hook-into-modes
    stolen from [[https://github.com/jwiegley/dot-emacs][jww's dot emacs]]. adds a function to each of a list of
    modes. needs to be used with apply.
#+BEGIN_SRC emacs-lisp
  (defsubst hook-into-modes (func &rest modes)
    (dolist (mode-hook modes) (add-hook mode-hook func)))
#+END_SRC
* Packages
** info+
#+BEGIN_SRC emacs-lisp
  (require 'info+)
#+END_SRC
** ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("C-x o" . ace-window)
    :config
    (add-hook 'window-configuration-change-hook 'aw-update)
    (setq aw-background nil
          aw-dispatch-always t))
#+END_SRC
** Magit
   [[https://github.com/magit/magit][github]] [[http://magit.vc/manual/][manual]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-c g s" . magit-status)
           ("C-c g p" . magit-pull)))
#+END_SRC
** TODO Tramp
** typing
#+BEGIN_SRC emacs-lisp
  (use-package typing
    :load-path "site-lisp"
    :config
    (setq toe-highscore-file (concat user-emacs-directory "toe-highscore")))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init (global-company-mode)
    :bind ("C-t" . company-complete))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-setup-side-window-right-bottom)
    (which-key-mode))
#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :init
    (show-smartparens-global-mode t)
    (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
    (set-face-attribute 'sp-pair-overlay-face nil :background "black")
    :bind (("C-<" . sp-forward-barf-sexp)
           ("C->" . sp-forward-slurp-sexp)
           ("C-M-f" . sp-forward-sexp)
           ("C-M-b" . sp-backward-sexp)
           ("C-M-p" . sp-up-sexp)
           ("C-M-n" . sp-down-sexp)
           ("C-M-a" . sp-beginning-of-sexp)
           ("C-M-e" . sp-end-of-sexp)))
#+END_SRC
** origami
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :init (global-origami-mode)
    :config
    (bind-keys :map origami-mode-map
               ("C-<tab>" . origami-recursively-toggle-node)
               ("C-c o t" . origami-recursively-toggle-node)
               ("C-c o n" . origami-next-fold)
               ("C-c o p" . origami-previous-fold)
               ("C-c o s" . origami-show-only-node)
               ("C-c o o" . origami-open-all-nodes)
               ("C-c o c" . origami-close-all-nodes)
               ("C-c o u" . origami-undo)))
#+END_SRC
* Helm
** helm-config
#+BEGIN_SRC emacs-lisp
  (use-package helm-config
    :demand t
    :bind (("M-x" . helm-M-x)
	   ("C-h a" . helm-apropos)
	   ("C-x b" . helm-mini)
	   ("C-x C-f" . helm-find-files)
	   ("C-c h" . helm-command-prefix)
	   ("C-c h o" . helm-occur)
	   ("C-c h r" . helm-regexp)
	   ("C-c h x" . helm-resume)
	   ("C-c h y" . helm-show-kill-ring))
    :init (unbind-key "C-x c")
    :config
;; helm-list-elisp-packages
;; helm-filtered-bookmarks
;; helm-lisp-completion-at-point
;; helm-complex-command-history
;; helm-eval-expression-with-eldoc (add lispy)

    (require 'helm)
    (require 'async-bytecomp)
    (bind-keys :map helm-map
	       ("<tab>" . helm-execute-persistent-action)
	       ("C-i" . helm-execute-persistent-action)
	       ("C-z" . helm-select-action))

    (helm-autoresize-mode 1)

    (when (executable-find "curl") (setq helm-google-suggest-use-curl-p t))

    (helm-mode 1))
#+END_SRC
** helm-descbinds
#+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
    :bind ("C-h b" . helm-descbinds)
    :config (require 'helm-config))
#+END_SRC
** helm-adaptive
#+BEGIN_SRC emacs-lisp
  (use-package helm-adaptive
    :config
    (setq helm-adaptive-history-file (concat user-emacs-directory
                                             "helm/helm-adaptive-history"))
    (helm-adaptive-mode 1))
#+END_SRC
** helm-buffers
#+BEGIN_SRC emacs-lisp
  (use-package helm-buffers
    :config
    (setq helm-buffers-fuzzy-matching t))
#+END_SRC
** helm-command
#+BEGIN_SRC emacs-lisp
  (use-package helm-command
    :config
    (setq helm-M-x-always-save-history t
          helm-M-x-fuzzy-match t))
#+END_SRC
** helm-elisp
#+BEGIN_SRC emacs-lisp
  (use-package helm-elisp
    :config
    (setq helm-apropos-fuzzy-match t
          helm-lisp-fuzzy-completion t))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (use-package nkc-org)
#+END_SRC
* Modes
** Lisp
*** Packages
**** Lispy
     [[https://github.com/abo-abo/lispy][github]]
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :defer t)
#+END_SRC
*** Hooks
**** Lisp editing modes
     Sets up a hook to turn on various good things when using a lisp
     mode. Add additional modes to lisp-modes if needed.
#+BEGIN_SRC emacs-lisp
  (defvar lisp-modes '(emacs-lisp-mode
                       inferior-emacs-lisp-mode
                       ielm-mode
                       lisp-mode
                       inferior-lisp-mode
                       lisp-interaction-mode))
  (defvar lisp-mode-hooks
    (mapcar (lambda (mode)
              (intern
               (concat (symbol-name mode) "-hook")))
            lisp-modes))

  (defvar lisp-mode-initialized nil)

  (defun nkc/lisp-mode-hook ()
    (unless lisp-mode-initialized
      (setq lisp-mode-initialized t)
  
      (info-lookmore-elisp-userlast)
      (info-lookmore-elisp-cl))

    (add-hook 'after-save-hook 'check-parens nil t)
    (eldoc-mode 1)
    (lispy-mode 1)
    (smartparens-mode -1)




    (font-lock-add-keywords
     nil
     `((,(rx "(" symbol-start (group "lambda") symbol-end " (")
        (0 (ignore
            (compose-region (match-beginning 1)
                            (match-end 1) ?Î»)))))))

  (apply #'hook-into-modes 'nkc/lisp-mode-hook lisp-mode-hooks)
#+END_SRC
**** Minibuffer evals
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Ledger
#+BEGIN_SRC emacs-lisp
  (setq ledger-binary-path "/usr/local/bin/ledger")
#+END_SRC
** Elixir
*** Packages
**** elixir-mode
#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :config
    (defun nkc/sp-elixir-skip-inline-p (match beginning end)
      (save-excursion
        (when (looking-at match)
          (forward-word))
        (looking-back (concat ", " match))))
    (sp-with-modes '(elixir-mode)
      (sp-local-pair "do" "end"
                     :actions '(navigate)
                     :skip-match 'nkc/sp-elixir-skip-inline-p)
      ;; stops ends from matching with "do:"
      (sp-local-pair "fn" "end"
                     :when '(("SPC" "RET"))
                     :actions '(navigate insert))))
#+END_SRC
**** alchemist
#+BEGIN_SRC emacs-lisp
  (use-package alchemist
    :init (add-hook 'elixir-mode-hook 'alchemist-mode-hook)
    :config
    (setq alchemist-test-status-modeline nil)
    (defun nkc/erlang-alchemist-hook ()
      (define-key erlang-mode-map (kbd "M-,") 'alchemist-goto-jump-back))

    (add-hook 'erlang-mode-hook 'nkc/erlang-alchemist-hook))
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.raml\\'")
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode ("\\.md\\'" . gfm-mode))
#+END_SRC
* Themes
** Solarized
   [[https://github.com/sellout/emacs-color-theme-solarized][github]]
#+BEGIN_SRC emacs-lisp
  (load-theme 'solarized t)
#+END_SRC
*** TODO rewrite solarized-color-definitions per old .emacs
* Provide
#+BEGIN_SRC emacs-lisp
  (provide 'nkc-packages)
#+END_SRC

